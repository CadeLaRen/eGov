#UP
update EG_SCRIPT set script='transitions={''ASSISTANTADMIN'':[''aa_approve'',''aa_reject''],''SECTION MANAGERADMIN'':[''am_approve'',''am_reject''],''ANYONE'':[''hod_approve'',''hod_reject''],''INVALID'':[''invalid'']} 
employee = eisManagerBean.getEmpForUserId(userId)  
assignment  = eisManagerBean.getAssignmentByEmpAndDate(date,employee.getIdPersonalInformation())
print assignment
state=''''
if(assignment.functionary != None and assignment.desigId != None):
	state=assignment.desigId.designationName + assignment.functionary.name
	state=state.upper()
if(state !=''ASSISTANTADMIN'' and purpose==''authentication''):
    state=''INVALID''
elif(state ==''ASSISTANTADMIN''):
    state=''ASSISTANTADMIN''
elif(state ==''SECTION MANAGERADMIN''):
    state=''SECTION MANAGERADMIN''
else:
    state=''ANYONE''
if state in transitions:result=transitions[state]
print result'
where name='cbill.validation';


update EG_SCRIPT set script='result=['' '','' '' ]
employee = eisManagerBean.getEmpForUserId(userId)
print employee
assignment  = eisManagerBean.getAssignmentByEmpAndDate(DATE,employee.getIdPersonalInformation())
print assignment
state=''''
if(assignment.functionary != None and assignment.desigId != None):
	state=assignment.functionary.name + "-" + assignment.desigId.designationName
print state
if(state):
    state=state.upper()
if (state == ''ADMIN-ASSISTANT''):
	result[0]="ADMIN-SECTION MANAGER"
elif (state == ''ADMIN-SECTION MANAGER''):
	result[0]="ANYFUNCTIONARY-ANYDESG"
else:
     result[0]="END"'
where name='cbill.nextUser';


update  EG_SCRIPT set SCRIPT='from  org.egov.infstr import ValidationException
from org.egov.infstr import ValidationError
try:
	result=voucherService.budgetaryCheck(bill)
except ValidationException,e:
    validationErrors=e.getErrors()
    result=None'
where name='egf.bill.budgetcheck';

update EG_SCRIPT set script = 'from org.egov.pims.dao import EisDAOFactory
from org.egov.infstr import ValidationError
from org.egov.lib.rjbac.dept import DepartmentImpl
from org.egov.dao.bills import BillsDaoFactory
from org.egov.pims.utils import EisManagersUtill
from java.lang import Integer
from java.util import Date
from org.egov.infstr.client.filter import EGOVThreadLocals 
pimsDAO=EisDAOFactory.getDAOFactory().getPersonalInformationDAO()
empDeptDAO=EisDAOFactory.getDAOFactory().getEmployeeDepartmentDAO()
egBillRegDao=BillsDaoFactory.getDAOFactory().getEgBillRegisterHibernateDAO()
employeeService=EisManagersUtill.getEmployeeService()
eisCommonsService=EisManagersUtill.getEisCommonsService()  
def aa_approve():
    funcryDesgText = ''Generated by ''+ getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def am_approve():
    funcryDesgText = ''Checked by ''+getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def am_reject():
    funcryDesgText = ''Rejected by ''+getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def hod_approve():
    funcryDesgText =''Approved by ''+ getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    update_workflow(wfItem,''END'',''Expense Bill approved workflow ends'')
    egwstatus = persistenceService.find("from EgwStatus where moduletype=? and description=?",["EXPENSEBILL","Approved"])
    wfItem.setStatus(egwstatus)
    return (persistenceService.persist(wfItem),None)	
def hod_reject():
    funcryDesgText = ''Rejected by ''+ getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def update_workflow(wfItem,wfItemStatus,comments):  
    position=eisCommonsService.getPositionByUserId(Integer.valueOf(action.getName().split(''|'')[1]))  
    wfItem.changeState(wfItemStatus,position,comments)  
def getLoginUserFuncryAndDesgText():  
    personalInfo = employeeService.getEmpForUserId(Integer.valueOf(EGOVThreadLocals.getUserId()))  
    assignment = employeeService.getAssignmentByEmpAndDate(Date(),personalInfo.getIdPersonalInformation())  
    funcryDesgText = ''''  
    if(assignment.functionary != None):  
      funcryDesgText=  assignment.functionary.name  + '' ''  
    if(assignment.desigId != None):  
      funcryDesgText = funcryDesgText + assignment.desigId.designationName  
    return funcryDesgText
transitions={''aa_approve'':aa_approve,''am_approve'':am_approve,''am_reject'':am_reject,''hod_approve'':hod_approve,''hod_reject'':hod_reject}
result,validationErrors=transitions[action.getName().split(''|'')[0]]()'
WHERE name='Cbill.workflow'; 


#DOWN
update EG_SCRIPT set script = 'from org.egov.pims.dao import EisDAOFactory
from org.egov.infstr import ValidationError
from org.egov.lib.rjbac.dept import DepartmentImpl
from org.egov.dao.bills import BillsDaoFactory
from org.egov.pims.utils import EisManagersUtill
from java.lang import Integer
from java.util import Date
from org.egov.infstr.client.filter import EGOVThreadLocals 
pimsDAO=EisDAOFactory.getDAOFactory().getPersonalInformationDAO()
empDeptDAO=EisDAOFactory.getDAOFactory().getEmployeeDepartmentDAO()
egBillRegDao=BillsDaoFactory.getDAOFactory().getEgBillRegisterHibernateDAO()
employeeService=EisManagersUtill.getEmployeeService()
eisCommonsService=EisManagersUtill.getEisCommonsService()  
def aa_approve():
    funcryDesgText = ''Generated by ''+ getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def am_approve():
    funcryDesgText = ''Checked by ''+getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def am_reject():
    funcryDesgText = ''Rejected by ''+getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def hod_approve():
    funcryDesgText =''Approved by ''+ getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    update_workflow(wfItem,''END'',''Expense Bill approved workflow ends'')
    egwstatus = persistenceService.find("from EgwStatus where moduletype=? and description=?",["EXPENSEBILL","Approved"])
    wfItem.setStatus(egwstatus)
    return (persistenceService.persist(wfItem),None)	
def hod_reject():
    funcryDesgText = ''Rejected by ''+ getLoginUserFuncryAndDesgText()
    update_workflow(wfItem,funcryDesgText.upper(),comments)
    return (persistenceService.persist(wfItem),None)
def update_workflow(wfItem,wfItemStatus,comments):  
    position=eisCommonsService.getPositionByUserId(Integer.valueOf(action.getName().split(''|'')[1]))  
    wfItem.changeState(wfItemStatus,position,comments)  
def getLoginUserFuncryAndDesgText():  
    personalInfo = employeeService.getEmpForUserId(Integer.valueOf(EGOVThreadLocals.getUserId()))  
    assignment = employeeService.getAssignmentByEmpAndDate(Date(),personalInfo.getIdPersonalInformation())  
    funcryDesgText = ''''  
    if(assignment.functionary != None):  
      funcryDesgText=  assignment.functionary.name  + '' ''  
    if(assignment.desigId != None):  
      funcryDesgText = funcryDesgText + assignment.desigId.designationName  
    return funcryDesgText
transitions={''aa_approve'':aa_approve,''am_approve'':am_approve,''am_reject'':am_reject,''hod_approve'':hod_approve,''hod_reject'':hod_reject}
result,validationErrors=transitions[action.getName().split(''|'')[0]]()'
WHERE name='Cbill.workflow'; 
