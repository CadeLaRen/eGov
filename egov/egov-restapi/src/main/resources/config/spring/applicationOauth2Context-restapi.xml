<?xml version="1.0" encoding="UTF-8"?>
<!-- eGov suite of products aim to improve the internal efficiency,transparency, 
	accountability and the service delivery of the government organizations. 
	Copyright (C) <2015> eGovernments Foundation The updated version of eGov 
	suite of products as by eGovernments Foundation is available at http://www.egovernments.org 
	This program is free software: you can redistribute it and/or modify it under 
	the terms of the GNU General Public License as published by the Free Software 
	Foundation, either version 3 of the License, or any later version. This program 
	is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
	without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
	PURPOSE. See the GNU General Public License for more details. You should 
	have received a copy of the GNU General Public License along with this program. 
	If not, see http://www.gnu.org/licenses/ or http://www.gnu.org/licenses/gpl.html 
	. In addition to the terms of the GPL license to be adhered to in using this 
	program, the following additional terms are to be complied with: 1) All versions 
	of this program, verbatim or modified must carry this Legal Notice. 2) Any 
	misrepresentation of the origin of the material is prohibited. It is required 
	that all modified versions of this material be marked in reasonable ways 
	as different from the original version. 3) This license does not grant any 
	rights to any user of the program with regards to rights under trademark 
	law for use of the trade names or trademarks of eGovernments Foundation. 
	In case of any queries, you can reach eGovernments Foundation at contact@egovernments.org. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd 
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

	<!-- Definition of the Authentication Service  -->
	<security:http pattern="/oauth/token" create-session="stateless" 
		authentication-manager-ref="clientAuthenticationManager" 
		xmlns="http://www.springframework.org/schema/security">
		<security:intercept-url pattern="/oauth/token" access="isAuthenticated()"/>
		<security:anonymous enabled="false" />
		<security:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<security:access-denied-handler ref="oauthAccessDeniedHandler" />
		<security:csrf disabled="true"/>
	</security:http>
	
	<!-- Protected resources -->
	<security:http auto-config="true" use-expressions="true" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" 
		access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
		<security:anonymous enabled="false" />
		<security:intercept-url pattern="/property/**" access="hasRole('ROLE_EMPLOYEE')" />
		<security:intercept-url pattern="/watertax/**" access="hasRole('ROLE_EMPLOYEE')" />
		<security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
		<security:access-denied-handler ref="oauthAccessDeniedHandler"/>
		<security:csrf disabled="true"/>
	</security:http>
	
	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="test"></property>
	</bean>
	
	<bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="test/client" />
		<property name="typeName" value="Basic" />
	</bean>
	
	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
	
	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>
	
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" 
			xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
				<bean class="org.springframework.security.access.vote.RoleVoter"/>
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
			</list>
		</constructor-arg>
	</bean>

	<!-- Authentication in config file -->
	<security:authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<security:authentication-provider user-service-ref="clientDetailsUserService"/>
	</security:authentication-manager>
	
	<security:authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
		<!-- <security:authentication-provider>
			<security:user-service>
				<security:user name="admin" password="password" authorities="ROLE_USER"/>
			</security:user-service>
		</security:authentication-provider> -->
		<security:authentication-provider ref="customAuthenticationProvider" />
	</security:authentication-manager>
	<bean id="customAuthenticationProvider"
		class="org.egov.api.oauth2.provider.CustomAuthenticationProvider">
	</bean>
	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>
	
	<!-- Token Store -->
	<!-- Used for the persistenceof tokens (currently an in memory implementation) -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />

	<!-- Used to create token and and every thing about them except for their persistence that is reposibility of TokenStore (Given here is a default implementation) -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="accessTokenValiditySeconds" value="3600"/>
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>
	
	<bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="tokenStore" ref="tokenStore" />
		<property name="requestFactory" ref="oAuth2RequestFactory"/>
	</bean>
	
	<!-- Token management -->
	<oauth:authorization-server	client-details-service-ref="clientDetails" token-services-ref="tokenServices" 
								user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>
	
	<oauth:resource-server id="resourceServerFilter" 
						   resource-id="dstest" 
						   token-services-ref="tokenServices"/>

	<!-- Client Definition -->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="trusted-rest-client"
					  authorized-grant-types="password,authorization_code,refresh_token,implicit,redirect" 
					  authorities="ROLE_CLIENT,ROLE_TRUSTED_CLIENT"
					  redirect-uri="/web"
					  scope="read,write,trust"
					  access-token-validity="3600" 
					  refresh-token-validity="3600"/>
	</oauth:client-details-service>
	
	<security:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<security:expression-handler ref="oauthExpressionHandler" />
	</security:global-method-security>
	
	<oauth:expression-handler id="oauthExpressionHandler" />
	<oauth:web-expression-handler id="oauthWebExpressionHandler" />	
	<bean id="oAuth2RequestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
    	<constructor-arg ref="clientDetails" />
	</bean>
	<bean id="securityFilterChain" name="securityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<constructor-arg>
			<list>
				<security:filter-chain pattern="/resources/**" filters="none" />
				<security:filter-chain pattern="/reg-success**" filters="none" />
				<security:filter-chain pattern="/error/**" filters="none" />
				<security:filter-chain pattern="/index.jsp" filters="none" />
 			</list>
		</constructor-arg>
	</bean>	
	<mvc:resources mapping="/resources/**" location="/resources/" />
</beans>
