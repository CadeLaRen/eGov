package org.egov.works.models.estimate;

import javax.script.ScriptContext;

import org.apache.log4j.Logger;
import org.egov.commons.CFinancialYear;
import org.egov.infstr.ValidationException;
import org.egov.infstr.services.ScriptService;
import org.egov.infstr.utils.SequenceGenerator;
import org.egov.works.models.masters.DepositCode;
import org.springframework.beans.factory.annotation.Autowired;

public class ProjectCodeGenerator {
	private static final Logger logger = Logger.getLogger(ProjectCodeGenerator.class);
	@Autowired
        private SequenceGenerator sequenceGenerator;
        //private PersistenceService<Script, Long> scriptService;
        @Autowired
        private ScriptService scriptService;
	
	public String generateProjectcode(AbstractEstimate estimate, CFinancialYear finYear){
	    try{
                ScriptContext scriptContext = ScriptService.createContext("estimate",estimate,"finYear",finYear,"sequenceGenerator",sequenceGenerator);
                return scriptService.executeScript("works.projectcode.generator", scriptContext).toString();
            }
            catch (ValidationException sequenceException) {
                throw sequenceException;
            }
		/*String projectCode ="";
		
		List<Script> scripts = scriptService.findAllByNamedQuery("SCRIPT", "works.projectcode.generator");
		try{
			projectCode = scripts.get(0).eval(Script.createContext("estimate",estimate,
				"finYear",finYear,"sequenceGenerator",sequenceGenerator)).toString();
		}
		catch (ValidationException sequenceException) {
			throw sequenceException;
		}

		return projectCode;*/
	}
	// Added as per Card 1042- Generate Deposit works/ project code 
	// For AutoGeneration of Project Code
	public String getAutoGeneratedProjectCode(DepositCode depositCode){
	    try{
                ScriptContext scriptContext = ScriptService.createContext("projectCode",depositCode,"sequenceGenerator",sequenceGenerator);
                return scriptService.executeScript("works.subLedgerProjectCode.generator", scriptContext).toString();
            }
            catch (ValidationException sequenceException) {
                throw sequenceException;
            }
		/*List<Script> scripts = scriptService.findAllByNamedQuery("SCRIPT", "works.subLedgerProjectCode.generator");
		try{
		return scripts.get(0).eval(Script.createContext("projectCode",depositCode,"sequenceGenerator",sequenceGenerator)).toString();
		}
		catch (ValidationException e) {
			logger.error("in project code generation exception>>>>>>>>>>"+e.getErrors());
			throw e;
		}*/
	}
	
}

