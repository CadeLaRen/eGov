package org.egov.works.models.estimate;

import java.util.ArrayList;
import java.util.List;

import org.egov.commons.CFinancialYear;
import org.egov.exceptions.NoSuchObjectException;
import org.egov.infstr.models.Script;
import org.egov.infstr.services.PersistenceService;
import org.egov.infstr.services.ScriptService;
import org.egov.infstr.utils.SequenceGenerator;
import org.egov.works.models.masters.DepositCode;

public class ProjectCodeGenerator {
	private PersistenceService<ProjectCode, Long> projectCodeService;
	private PersistenceService<AssetsForEstimate, Long> assetsForEstimateService;
	
	private SequenceGenerator sequenceGenerator;
	private PersistenceService<Script, Long> scriptService;
	private transient ScriptService scriptExecutionService;

	public List<ProjectCode> getAllActiveProjectCodes(int fundId,Long functionId, int functionaryId, int fieldId, int deptId) {
		
		String fundCondition=""; 
		String functionCondition="";
		String functionaryCondition="";
		String fieldCondition=""; 
		String departmentCondition=""; 
		
		if(fundId!=0){
			fundCondition=" and fd.fund.id="+fundId;
		}
		if(functionId!=0){
			functionCondition=" and fd.function.id="+functionId;
		}
		if(functionaryId!=0){
			functionaryCondition=" and fd.functionary.id="+functionaryId;
		}
		if(fieldId!=0){
			fieldCondition=" and ae.ward.id="+fieldId;
		}
		if(deptId!=0){
			departmentCondition=" and ae.executingDepartment.id="+deptId;
		}
			
		return projectCodeService.findAllBy("select pc from ProjectCode pc where pc in (select ae.projectCode from AbstractEstimate as ae inner join ae.financialDetails as fd where ae.state.value not in('CANCEL','COMP_CERTIFICATE')"+ departmentCondition + fieldCondition + fundCondition + functionCondition + functionaryCondition + ")");
	}
	
	public List getAssetListByProjectCode(Long projectCodeId) throws NoSuchObjectException {
		List<String> assetCodeList=new ArrayList<String>();
		ProjectCode pc = projectCodeService.find("from ProjectCode where id=?",projectCodeId);
		if(pc==null){
			throw new NoSuchObjectException("projectcode.notfound");
		}
		List<AssetsForEstimate> assetsForEstimateList = assetsForEstimateService.findAllByNamedQuery("ASSETS_FOR_PROJECTCODE", projectCodeId);
		if(assetsForEstimateList.isEmpty()){
			throw new NoSuchObjectException("assetsforestimate.projectcode.asset.notfound");
		}
		else{
			for(AssetsForEstimate assetsForEstimate: assetsForEstimateList){
				assetCodeList.add(assetsForEstimate.getAsset().getCode());
			}			
		}			
		return assetCodeList;
	}
	
	public String generateProjectcode(AbstractEstimate estimate, CFinancialYear finYear){
		List<Script> scripts = scriptService.findAllByNamedQuery("SCRIPT", "works.projectcode.generator");
		return (String) scriptExecutionService.executeScript(scripts.get(0), ScriptService.createContext("estimate",estimate,
				"finYear",finYear,"sequenceGenerator",sequenceGenerator));
	}
	// Added as per Card 1042- Generate Deposit works/ project code 
	// For AutoGeneration of Project Code
	public String getAutoGeneratedProjectCode(DepositCode depositCode){
		List<Script> scripts = scriptService.findAllByNamedQuery("SCRIPT", "works.subLedgerProjectCode.generator");
		return (String) scriptExecutionService.executeScript(scripts.get(0), ScriptService.createContext("projectCode",depositCode,"sequenceGenerator",sequenceGenerator));
	}
	
	public void setAssetsForEstimateService(
			PersistenceService<AssetsForEstimate, Long> assetsForEstimateService) {
		this.assetsForEstimateService = assetsForEstimateService;
	}

	public void setProjectCodeService(
			PersistenceService<ProjectCode, Long> projectCodeService) {
		this.projectCodeService = projectCodeService;
	}

	public void setSequenceGenerator(SequenceGenerator sequenceGenerator) {
		this.sequenceGenerator = sequenceGenerator;
	}

	public void setScriptService(PersistenceService<Script, Long> scriptService) {
		this.scriptService = scriptService;
	}

	public void setScriptExecutionService(ScriptService scriptExecutionService) {
		this.scriptExecutionService = scriptExecutionService;
	}
	
}

