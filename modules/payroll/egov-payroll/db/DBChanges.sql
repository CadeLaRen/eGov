/** changes for 18 Dec release **/
ALTER TABLE EGPAY_EMPPAYROLL
  ADD BASIC_PAY NUMBER(15,2) NOT NULL;
 
/** changes for 23rd dec releases  **/

Update egw_status set description='Closed' where id=56;

/** changes for 2nd jan 2008 releases  **/

ALTER TABLE EGPAY_EXCEPTION
  ADD fromDate DATE
  ADD toDate DATE;
  
  
/** changes for 3nd jan 2008 releases  **/

ALTER TABLE EGPAY_EMPPAYROLL
  ADD PAYTYPE NUMBER(3) ;

UPDATE EGPAY_EMPPAYROLL SET PAYTYPE=1 ;
  
ALTER TABLE EGPAY_EMPPAYROLL
  MODIFY PAYTYPE NOT NULL;
  
/** changes for 08th jan 2008 releases **/

CREATE TABLE EGPAY_BATCHGENDETAILS
(
  id NUMBER NOT NULL,
  month NUMBER NOT NULL,
  id_dept NUMBER NOT NULL,
  financialyearid NUMBER NOT NULL,
  fromdate DATE NOT NULL,
  todate DATE NOT NULL,
  CONSTRAINT PK_EGPAY_BATCHGENDETAILS PRIMARY KEY (id )
);

CREATE INDEX PK_EGPAY_BATCHGENDETAILS
 ON EGPAY_BATCHGENDETAILS(ID);
 
 ALTER TABLE EGPAY_BATCHGENDETAILS ADD (
   CONSTRAINT FK_ID_DEPT FOREIGN KEY (id_dept) 
     REFERENCES EG_department (ID_dept));
 	
 
 ALTER TABLE EGPAY_BATCHGENDETAILS ADD (
   CONSTRAINT FK_FINYEAR_ID FOREIGN KEY (FINANCIALYEARID) 
    REFERENCES FINANCIALYEAR (ID));
    
    

CREATE TABLE EGPAY_BATCHFAILUREDETAILS
(
  id NUMBER NOT NULL,
  empid number NOT NULL,
  month NUMBER NOT NULL,
  financialyearid NUMBER NOT NULL,
  fromdate DATE ,
  todate DATE ,
  paytype number,
  CONSTRAINT PK_EGPAY_BATCHFAILUREDETAILS PRIMARY KEY (id )
)
;

CREATE INDEX PK_EGPAY_BATCHFAILUREDETAILS
 ON EGPAY_BATCHFAILUREDETAILS(ID);

  ALTER TABLE EGPAY_BATCHFAILUREDETAILS ADD (
   CONSTRAINT FK_FINANCIALYEAR_ID FOREIGN KEY (FINANCIALYEARID) 
    REFERENCES FINANCIALYEAR (ID));
	
ALTER TABLE EGPAY_BATCHFAILUREDETAILS ADD (
   CONSTRAINT FK_emp__ID FOREIGN KEY (empid) 
    REFERENCES eg_employee (ID));
	

ALTER TABLE EGPAY_BATCHFAILUREDETAILS modify paytype not null;

CREATE SEQUENCE EISPAYROLL_BATCHGENDETAILS_SEQ
START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER ;


CREATE SEQUENCE EISPAYROLL_BATCHFAILUREDTS_SEQ
START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER ;

ALTER TABLE EGPAY_BATCHFAILUREDETAILS modify paytype not null;



/** Payment type became nullable **/

ALTER TABLE EGPAY_SALADVANCES
  MODIFY (PAYMENT_TYPE   NULL);

  
  /********* 18th jan 2007 ****************/
alter table egpay_batchgendetails add createdby number(3) not null;
alter table egpay_batchgendetails add createddate date not null;
alter table egpay_batchgendetails add remarks varchar(300);
alter table egpay_batchfailuredetails add remarks varchar(2000);
alter table egpay_batchfailuredetails add createdby number(3) not null;
alter table egpay_batchfailuredetails add createddate date not null;
alter table egpay_batchfailuredetails add status number not null;
alter table egpay_batchgendetails modify id_dept null;
alter table egpay_emppayroll add fromdate date ;
alter table egpay_emppayroll add todate date ;
alter table egpay_batchfailuredetails add ishistory varchar(2);

  
 /** Financial Table changes for recoveries **/ 
  
 ALTER  TABLE  tds  ADD( bankid NUMBER );
 
 ALTER TABLE tds ADD (
 
   CONSTRAINT FK_TDS_BK FOREIGN KEY ( bankid)
 
     REFERENCES bank (ID ));
 
  
 
 ALTER TABLE eg_remittance_gldtl ADD( tdsid NUMBER );
 
 ALTER TABLE eg_remittance_gldtl ADD (
 
   CONSTRAINT FK_RMTGL_TDS FOREIGN KEY ( tdsid)
 
    REFERENCES tds (ID ));



/** SalaryCodes changed for referrence to tds table	**/

ALTER TABLE EGPAY_SALARYCODES
  ADD TDS_ID NUMBER(12);

ALTER TABLE EGPAY_SALARYCODES ADD 
CONSTRAINT FK_TDS_ID
 FOREIGN KEY (TDS_ID)
 REFERENCES TDS (ID) ENABLE
 VALIDATE;


/** glcodeid column in salarycodes table nullable reference through tds table	**/

ALTER TABLE EGPAY_SALARYCODES
  MODIFY (GLCODEID   NULL);


/**  craeate referrence from EgBillPayeedetails to Tds	 **/

ALTER TABLE EG_BILLPAYEEDETAILS
  ADD TDSID NUMBER;

ALTER TABLE EG_BILLPAYEEDETAILS ADD 
CONSTRAINT FK_TDSID
 FOREIGN KEY (TDSID)
 REFERENCES TDS (ID) ENABLE
 VALIDATE;
 
 
 /** jan 29th changes ***********************/
 
 alter table egpay_batchgendetails add succcount number;
 alter table egpay_batchgendetails add failcount number;
 
 /***** jan 31 changes ****************/
alter table egpay_emppayroll add workingDays number(12);
update egpay_emppayroll set workingdays=0 where workingdays is null;
alter table egpay_emppayroll modify workingdays not null;


alter table egpay_payscale_employee add curr_basicpay number ;
update egpay_payscale_employee set curr_basicpay=0 where curr_basicpay is null;
alter table egpay_payscale_employee modify curr_basicpay not null;


/****** feb 12th 2008 changes **************/


CREATE TABLE egpay_incrementDetails
( 
  id NUMBER,
  month NUMBER(2) NOT NULL,
  financialyearid NUMBER NOT NULL,
  incrementDate DATE NOT NULL,
  amount NUMBER NOT NULL,
  empid number not null,
  remarks varchar(200),
  createdby number not null,
  createddate date not null,
  status number not null,  
  CONSTRAINT PK_IncrementDetails PRIMARY KEY (id ),
  Foreign Key(financialyearid) references financialyear(id),
  Foreign Key(empid) references eg_employee(id)
);

CREATE SEQUENCE EISPAYROLL_INCREMENTDET_SEQ
START WITH 0
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER ;


/******** insert payslip deptApproved status   *********/

insert into egw_status values (57,'PaySlip','DeptApproved',sysdate);


/**** added modify_remarks column for storing remarks of payslip modification ****/

ALTER TABLE EGPAY_EMPPAYROLL
  ADD MODIFY_REMARKS VARCHAR2(512);


/*** inserted salary advance rejected status	****/

insert into egw_status values (58,'Salaryadvance','Rejected',sysdate);

/****  13 Mar 2008 ************************/
alter table egpay_batchgendetails add( status number(2) );
update egpay_batchgendetails set status = 2;
alter table egpay_batchgendetails modify status  not null;


/***** 23rd changes *****************************/


alter table egpay_exception add (expDate date);

/********02-apr-2008 ***********************************/

insert into  egw_status values (59,'Salaryadvance','Closed',sysdate);

/********05-May-2008 ***********************************/
alter table egpay_batchfailuredetails add (deptid number);
update egpay_batchfailuredetails set deptid = 1 ;
alter table egpay_batchfailuredetails modify deptid not null;

/********06-May-2008 ***********************************/

CREATE TABLE egpay_emppayrolltypes
(
  id NUMBER,
  paytype VARCHAR2(512) NOT NULL,
  narration VARCHAR2(800) NOT NULL,
  createddate DATE NOT NULL,
  createdby NUMBER NOT NULL,
  lastmodifieddate DATE,
  lastmodifiedby NUMBER,
  CONSTRAINT PK_egpay_emppayrolltypes PRIMARY KEY (id )
);


/**********Added local_lang_desc column to egpay_salarycodes****************/

ALTER TABLE EGPAY_SALARYCODES
  ADD LOCAL_LANG_DESC NVARCHAR2(1000);


/**********07-May-2008****************/

ALTER TABLE egpay_emppayroll ADD 
CONSTRAINT FK_PAYTYPEID
 FOREIGN KEY (PAYTYPE)
 REFERENCES egpay_emppayrolltypes (ID) ENABLE
 VALIDATE;



ALTER TABLE egpay_batchfailuredetails ADD 
CONSTRAINT FK_deptID
 FOREIGN KEY (deptid)
 REFERENCES eg_department (ID_dept) ENABLE
 VALIDATE;

/************** 11th june 2008 changes *****************************/
ALTER TABLE egpay_emppayroll ADD (temp NUMBER(12,1));

commit;

update egpay_emppayroll set temp=numdays;

ALTER TABLE egpay_emppayroll
DROP (numdays);

ALTER TABLE egpay_emppayroll
RENAME COLUMN temp to numdays;
alter table egpay_emppayroll modify numdays not null;

commit;


/***********insert into leave_status table Encashed status***********\

insert into egeis_leave_status values('Encashed',4)


/****added interest account column for interest bearing advance************/
ALTER TABLE EGPAY_SALARYCODES
  ADD INTEREST_GLCODEID NUMBER(12)


/****todate column of payslip table should be not null field*********/
ALTER TABLE EGPAY_EMPPAYROLL
  MODIFY (TODATE   NOT NULL)
  
  
/**** Added for PF module on july 4th*****/

CREATE TABLE EGPAY_PFHEADER
(
  ID                 NUMBER                     NOT NULL,
  PFACCOUNTID        NUMBER                     NOT NULL,
  PFINTEXPACCOUNTID  NUMBER                     NOT NULL,
  FREQUENCY          VARCHAR2(8 BYTE)
);
CREATE SEQUENCE SEQ_PFHEADER
  START WITH 1
  MAXVALUE 9999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
CREATE TABLE EGPAY_PFDETAILS
(
  ID                    NUMBER                  NOT NULL,
  PFHEADERID            NUMBER                  NOT NULL,
  FROMDATE              DATE                    NOT NULL,
  TODATE                DATE,
  ANNUALRATEOFINTEREST  NUMBER(5,2)            NOT NULL
);
CREATE SEQUENCE SEQ_PFDETAILS
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
  
  /**** added for quartz on july 4th ******/
  
  CREATE TABLE qrtz_job_details
    (
      JOB_NAME  VARCHAR2(80) NOT NULL,
      JOB_GROUP VARCHAR2(80) NOT NULL,
      DESCRIPTION VARCHAR2(120) NULL,
      JOB_CLASS_NAME   VARCHAR2(128) NOT NULL, 
      IS_DURABLE VARCHAR2(1) NOT NULL,
      IS_VOLATILE VARCHAR2(1) NOT NULL,
      IS_STATEFUL VARCHAR2(1) NOT NULL,
      REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
      JOB_DATA BLOB NULL,
      PRIMARY KEY (JOB_NAME,JOB_GROUP)
  );
  CREATE TABLE qrtz_job_listeners
    (
      JOB_NAME  VARCHAR2(80) NOT NULL, 
      JOB_GROUP VARCHAR2(80) NOT NULL,
      JOB_LISTENER VARCHAR2(80) NOT NULL,
      PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
      FOREIGN KEY (JOB_NAME,JOB_GROUP) 
  	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
  );
  CREATE TABLE qrtz_triggers
    (
      TRIGGER_NAME VARCHAR2(80) NOT NULL,
      TRIGGER_GROUP VARCHAR2(80) NOT NULL,
      JOB_NAME  VARCHAR2(80) NOT NULL, 
      JOB_GROUP VARCHAR2(80) NOT NULL,
      IS_VOLATILE VARCHAR2(1) NOT NULL,
      DESCRIPTION VARCHAR2(120) NULL,
      NEXT_FIRE_TIME NUMBER(13) NULL,
      PREV_FIRE_TIME NUMBER(13) NULL,
      PRIORITY NUMBER(13) NULL,
      TRIGGER_STATE VARCHAR2(16) NOT NULL,
      TRIGGER_TYPE VARCHAR2(8) NOT NULL,
      START_TIME NUMBER(13) NOT NULL,
      END_TIME NUMBER(13) NULL,
      CALENDAR_NAME VARCHAR2(80) NULL,
      MISFIRE_INSTR NUMBER(2) NULL,
      JOB_DATA BLOB NULL,
      PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
      FOREIGN KEY (JOB_NAME,JOB_GROUP) 
  	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP) 
  );
  CREATE TABLE qrtz_simple_triggers
    (
      TRIGGER_NAME VARCHAR2(80) NOT NULL,
      TRIGGER_GROUP VARCHAR2(80) NOT NULL,
      REPEAT_COUNT NUMBER(7) NOT NULL,
      REPEAT_INTERVAL NUMBER(12) NOT NULL,
      TIMES_TRIGGERED NUMBER(7) NOT NULL,
      PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
      FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
  	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
  );
  CREATE TABLE qrtz_cron_triggers
    (
      TRIGGER_NAME VARCHAR2(80) NOT NULL,
      TRIGGER_GROUP VARCHAR2(80) NOT NULL,
      CRON_EXPRESSION VARCHAR2(80) NOT NULL,
      TIME_ZONE_ID VARCHAR2(80),
      PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
      FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
  	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
  );
  CREATE TABLE qrtz_blob_triggers
    (
      TRIGGER_NAME VARCHAR2(80) NOT NULL,
      TRIGGER_GROUP VARCHAR2(80) NOT NULL,
      BLOB_DATA BLOB NULL,
      PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
      FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
          REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
  );
  CREATE TABLE qrtz_trigger_listeners
    (
      TRIGGER_NAME  VARCHAR2(80) NOT NULL, 
      TRIGGER_GROUP VARCHAR2(80) NOT NULL,
      TRIGGER_LISTENER VARCHAR2(80) NOT NULL,
      PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
      FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
  	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
  );
  CREATE TABLE qrtz_calendars
    (
      CALENDAR_NAME  VARCHAR2(80) NOT NULL, 
      CALENDAR BLOB NOT NULL,
      PRIMARY KEY (CALENDAR_NAME)
  );
  CREATE TABLE qrtz_paused_trigger_grps
    (
      TRIGGER_GROUP  VARCHAR2(80) NOT NULL, 
      PRIMARY KEY (TRIGGER_GROUP)
  );
  CREATE TABLE qrtz_fired_triggers 
    (
      ENTRY_ID VARCHAR2(95) NOT NULL,
      TRIGGER_NAME VARCHAR2(80) NOT NULL,
      TRIGGER_GROUP VARCHAR2(80) NOT NULL,
      IS_VOLATILE VARCHAR2(1) NOT NULL,
      INSTANCE_NAME VARCHAR2(80) NOT NULL,
      FIRED_TIME NUMBER(13) NOT NULL,
      PRIORITY NUMBER(13) NOT NULL,
      STATE VARCHAR2(16) NOT NULL,
      JOB_NAME VARCHAR2(80) NULL,
      JOB_GROUP VARCHAR2(80) NULL,
      IS_STATEFUL VARCHAR2(1) NULL,
      REQUESTS_RECOVERY VARCHAR2(1) NULL,
      PRIMARY KEY (ENTRY_ID)
  );
  CREATE TABLE qrtz_scheduler_state 
    (
      INSTANCE_NAME VARCHAR2(80) NOT NULL,
      LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
      CHECKIN_INTERVAL NUMBER(13) NOT NULL,
      PRIMARY KEY (INSTANCE_NAME)
  );
  CREATE TABLE qrtz_locks
    (
      LOCK_NAME  VARCHAR2(40) NOT NULL, 
      PRIMARY KEY (LOCK_NAME)
  );
  INSERT INTO qrtz_locks values('TRIGGER_ACCESS');
  INSERT INTO qrtz_locks values('JOB_ACCESS');
  INSERT INTO qrtz_locks values('CALENDAR_ACCESS');
  INSERT INTO qrtz_locks values('STATE_ACCESS');
  INSERT INTO qrtz_locks values('MISFIRE_ACCESS');
  create index idx_qrtz_j_req_recovery on qrtz_job_details(REQUESTS_RECOVERY);
  create index idx_qrtz_t_next_fire_time on qrtz_triggers(NEXT_FIRE_TIME);
  create index idx_qrtz_t_state on qrtz_triggers(TRIGGER_STATE);
  create index idx_qrtz_t_nft_st on qrtz_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
  create index idx_qrtz_t_volatile on qrtz_triggers(IS_VOLATILE);
  create index idx_qrtz_ft_trig_name on qrtz_fired_triggers(TRIGGER_NAME);
  create index idx_qrtz_ft_trig_group on qrtz_fired_triggers(TRIGGER_GROUP);
  create index idx_qrtz_ft_trig_nm_gp on qrtz_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
  create index idx_qrtz_ft_trig_volatile on qrtz_fired_triggers(IS_VOLATILE);
  create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(INSTANCE_NAME);
  create index idx_qrtz_ft_job_name on qrtz_fired_triggers(JOB_NAME);
  create index idx_qrtz_ft_job_group on qrtz_fired_triggers(JOB_GROUP);
  create index idx_qrtz_ft_job_stateful on qrtz_fired_triggers(IS_STATEFUL);
  create index idx_qrtz_ft_job_req_recovery on qrtz_fired_triggers(REQUESTS_RECOVERY);
 
  commit;

/********Aded foreign key reference from interest account code to chartofaccount*********\

ALTER TABLE EGPAY_SALARYCODES ADD 
CONSTRAINT FK_INTEREST_GLCODEID
 FOREIGN KEY (INTEREST_GLCODEID)
 REFERENCES CHARTOFACCOUNTS (ID) ENABLE
 VALIDATE




/******CREATE EGEIS_NOMINEE_TYPE TABLE******\

CREATE TABLE EGEIS_NOMINEE_TYPE
(
  ID NUMBER(12) NOT NULL,
  NOMINEE_TYPE VARCHAR2(64),
  FULL_BENEFIT_ELEGIBLE NUMBER(12),
  GENDER VARCHAR2(64),
  ELEGIBLE_AGE NUMBER(12),
  CONSTRAINT PK_EGEIS_NOMINEE_TYPE PRIMARY KEY (ID )
);


/********EGEIS_ELIG_CERT_TYPE*****\

CREATE TABLE EGEIS_ELIG_CERT_TYPE
(
  ID NUMBER(12) NOT NULL,
  TYPE VARCHAR2(64),
  DESCRIPTION VARCHAR2(64),
  CONSTRAINT PK_EGEIS_ELIG_CERT_TYPE PRIMARY KEY (ID )
);


/*************EGEIS_NOM_CERT_REQD**********\

CREATE TABLE EGEIS_NOM_CERT_REQD
(
  ID NUMBER(12) NOT NULL,
  ID_NOMINEE_TYPE NUMBER(12),
  ID_CERT_TYPE NUMBER(12),
  CONSTRAINT PK_EGEIS_NOM_CERT_REQD PRIMARY KEY (ID )
);

ALTER TABLE EGEIS_NOM_CERT_REQD ADD 
CONSTRAINT FK_ID_CERT_TYPE
 FOREIGN KEY (ID_CERT_TYPE)
 REFERENCES EGEIS_ELIG_CERT_TYPE (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_NOM_CERT_REQD ADD 
CONSTRAINT FK_ID_NOMINEE_TYPE
 FOREIGN KEY (ID_NOMINEE_TYPE)
 REFERENCES EGEIS_NOMINEE_TYPE (ID) ENABLE
 VALIDATE;

/************ EGEIS_PENSION_HEADER  *****************\

CREATE TABLE EGEIS_PENSION_HEADER
(
  ID NUMBER(12) NOT NULL,
  ID_EMP NUMBER(12),
  ID_BANK_BRANCH NUMBER(12),
  ACCOUNT_NUMBER VARCHAR2(64),
  DISBURSEMENT_TYPE VARCHAR2(64),
  CONSTRAINT PK_EGEIS_PENSION_HEADER PRIMARY KEY (ID )
);

ALTER TABLE EGEIS_PENSION_HEADER ADD 
CONSTRAINT FK_EMPID
 FOREIGN KEY (ID_EMP)
 REFERENCES EG_EMPLOYEE (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_PENSION_HEADER ADD 
CONSTRAINT FK_BANCKBRANCH_ID
 FOREIGN KEY (ID_BANK_BRANCH)
 REFERENCES BANKBRANCH (ID) ENABLE
 VALIDATE;




/*******************EGEIS_NOMINEE_DETAILS************************\

CREATE TABLE EGEIS_NOMINEE_DETAILS
(
  ID NUMBER(12) NOT NULL,
  ID_PENSION_HEADER NUMBER(12),
  ID_NOMINEE_TYPE NUMBER(12),
  FIRST_NAME VARCHAR2(64),
  MIDDLE_NAME VARCHAR2(64),
  LAST_NAME VARCHAR2(64),
  DOB DATE,
  PERCENTAGE VARCHAR2(64),
  ALIVE NUMBER(12),
  EMPLOYED NUMBER(12),
  MARRIED NUMBER(12),
  IS_ELIGIBLE NUMBER(12),
  ID_BANK NUMBER(12),
  ID_BANKACCOUNT NUMBER(12),
  CREATED_BY NUMBER(12),
  CREATED_DATE DATE,
  CONSTRAINT PK_EGEIS_NOMINEE_DETAILS PRIMARY KEY (ID )
);

ALTER TABLE EGEIS_NOMINEE_DETAILS ADD 
CONSTRAINT FK_ID_PENSION_HEADER
 FOREIGN KEY (ID_PENSION_HEADER)
 REFERENCES EGEIS_PENSION_HEADER (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_NOMINEE_DETAILS ADD 
CONSTRAINT FK_NOMINEE_TYPE
 FOREIGN KEY (ID_NOMINEE_TYPE)
 REFERENCES EGEIS_NOMINEE_TYPE (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_NOMINEE_DETAILS ADD 
CONSTRAINT FK_BANK
 FOREIGN KEY (ID_BANK)
 REFERENCES BANK (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_NOMINEE_DETAILS ADD 
CONSTRAINT FK_BANKACCOUNT
 FOREIGN KEY (ID_BANKACCOUNT)
 REFERENCES BANKACCOUNT (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_NOMINEE_DETAILS ADD 
CONSTRAINT FK_CREATED_BY
 FOREIGN KEY (CREATED_BY)
 REFERENCES EG_USER (ID_USER) ENABLE
 VALIDATE;



/*************EGEIS_CERT_DETAILS***************\

CREATE TABLE EGEIS_CERT_DETAILS
(
  ID NUMBER(12) NOT NULL,
  ID_EMP NUMBER(12),
  ID_NOMINEE NUMBER(12),
  ID_CERT_TYPE NUMBER(12),
  RESENT_DATE DATE,
  STATUS NUMBER(12),
  CREATED_BY NUMBER(12),
  CREATED_DATE DATE,
  CONSTRAINT PK_EGEIS_CERT_DETAILS PRIMARY KEY (ID )
);

ALTER TABLE EGEIS_CERT_DETAILS ADD 
CONSTRAINT FK_EMPLOYEEID
 FOREIGN KEY (ID_EMP)
 REFERENCES EG_EMPLOYEE (ID) ENABLE
 VALIDATE

ALTER TABLE EGEIS_CERT_DETAILS ADD 
CONSTRAINT FK_ID_NOMINEE
 FOREIGN KEY (ID_NOMINEE)
 REFERENCES EGEIS_NOMINEE_DETAILS (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_CERT_DETAILS ADD 
CONSTRAINT FK_CERT_TYPE_ID
 FOREIGN KEY (ID_CERT_TYPE)
 REFERENCES EGEIS_ELIG_CERT_TYPE (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_CERT_DETAILS ADD 
CONSTRAINT FK_ID_STATUS
 FOREIGN KEY (STATUS)
 REFERENCES EGW_STATUS (ID) ENABLE
 VALIDATE;

ALTER TABLE EGEIS_CERT_DETAILS ADD 
CONSTRAINT FK_CREATEDBY_USER
 FOREIGN KEY (CREATED_BY)
 REFERENCES EG_USER (ID_USER) ENABLE
 VALIDATE;



/***************EGPAY_PENSION_DETAILS*******************\

CREATE TABLE EGPAY_PENSION_DETAILS
(
  ID NUMBER(12) NOT NULL,
  ID_PENSION_HEADER NUMBER(12),
  PENSION_SANCTION_NO VARCHAR2(64),
  PENSION_SANCTION_AUTHORITY VARCHAR2(64),
  PENSION_NUMBER VARCHAR2(64),
  BASIC_PAY NUMBER(12,2),
  BASIC_COMP_PERCENT NUMBER(12,2),
  DA_PERCENT NUMBER(12,2),
  PENSION_ELIGIBLE NUMBER(12,2),
  COMMUTE_PERCENT NUMBER(12,2),
  COMMUTE_PERIOD NUMBER(12),
  COMMUTE_AMOUNT NUMBER(12,2),
  GRATUITY_AMOUNT NUMBER(12,2),
  PAY_TO VARCHAR2(64),
  STATUS NUMBER(12),
  CONSTRAINT PK_EGPAY_PENSION_DETAILS PRIMARY KEY (ID )
);


ALTER TABLE EGPAY_PENSION_DETAILS ADD 
CONSTRAINT FK_PENSION_HEADER_ID
 FOREIGN KEY (ID_PENSION_HEADER)
 REFERENCES EGEIS_PENSION_HEADER (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_DETAILS ADD 
CONSTRAINT FK_IDSTATUS
 FOREIGN KEY (STATUS)
 REFERENCES EGW_STATUS (ID) ENABLE
 VALIDATE;



/****************EGPAY_PENSION_RECOVERIES*********************\

CREATE TABLE EGPAY_PENSION_RECOVERIES
(
  ID NUMBER(12) NOT NULL,
  ID_PENSION_DETAILS NUMBER(12),
  ID_EMP NUMBER(12),
  ID_FUND NUMBER(12),
  ID_FUNCTION NUMBER(12),
  ID_FUNCTIONARY NUMBER(12),
  ID_GLCODE NUMBER(12),
  AMOUNT NUMBER(12,2),
  REFERENCE VARCHAR2(64),
  CONSTRAINT PK_EGPAY_PENSION_RECOVERIES PRIMARY KEY (ID )
);

ALTER TABLE EGPAY_PENSION_RECOVERIES ADD 
CONSTRAINT FK_PENSION_DETAILS
 FOREIGN KEY (ID_PENSION_DETAILS)
 REFERENCES EGPAY_PENSION_DETAILS (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_RECOVERIES ADD 
CONSTRAINT FK_IDEMPLOYEE
 FOREIGN KEY (ID_EMP)
 REFERENCES EG_EMPLOYEE (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_RECOVERIES ADD 
CONSTRAINT FK_FUNDID
 FOREIGN KEY (ID_FUND)
 REFERENCES FUND (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_RECOVERIES ADD 
CONSTRAINT FK_FUNCTIONID
 FOREIGN KEY (ID_FUNCTION)
 REFERENCES FUNCTION (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_RECOVERIES ADD 
CONSTRAINT FK_FUNCTIONARYID
 FOREIGN KEY (ID_FUNCTIONARY)
 REFERENCES FUNCTIONARY (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_RECOVERIES ADD 
CONSTRAINT FK_GLCODEID
 FOREIGN KEY (ID_GLCODE)
 REFERENCES CHARTOFACCOUNTS (ID) ENABLE
 VALIDATE;


/************EGPAY_PENSION_PAYMENT****************\

CREATE TABLE EGPAY_PENSION_PAYMENT
(
  ID NUMBER(12) NOT NULL,
  ID_EMP NUMBER(12),
  ID_NOMINEE_DETAILS NUMBER(12),
  ID_PENSION_DETAILS NUMBER(12),
  AMOUNT NUMBER(12,2),
  ID_FINANCIALYEAR NUMBER(12),
  MONTH NUMBER(12),
  PAYMENT_DATE DATE,
  STATUS NUMBER(12),
  TYPE VARCHAR2(64),
  ID_VOUCHER_HEADER NUMBER(12),
  MODIFIED_BY NUMBER(12),
  MODIFIED_DATE DATE,
  CONSTRAINT PK_EGPAY_PENSION_PAYMENT PRIMARY KEY (ID )
);

ALTER TABLE EGPAY_PENSION_PAYMENT ADD 
CONSTRAINT FK_EMPL_ID
 FOREIGN KEY (ID_EMP)
 REFERENCES EG_EMPLOYEE (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_PAYMENT ADD 
CONSTRAINT FK_ID_NOMINEE_DETAILS
 FOREIGN KEY (ID_NOMINEE_DETAILS)
 REFERENCES EGEIS_NOMINEE_DETAILS (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_PAYMENT ADD 
CONSTRAINT FK_ID_PENSION_DETAILS
 FOREIGN KEY (ID_PENSION_DETAILS)
 REFERENCES EGPAY_PENSION_DETAILS (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_PAYMENT ADD 
CONSTRAINT FK_ID_FINANCIALYEAR
 FOREIGN KEY (ID_FINANCIALYEAR)
 REFERENCES FINANCIALYEAR (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_PAYMENT ADD 
CONSTRAINT FK_ID_EG_STATUS
 FOREIGN KEY (STATUS)
 REFERENCES EGW_STATUS (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_PAYMENT ADD 
CONSTRAINT FK_VOUCHER_HEADER
 FOREIGN KEY (ID_VOUCHER_HEADER)
 REFERENCES VOUCHERHEADER (ID) ENABLE
 VALIDATE;

ALTER TABLE EGPAY_PENSION_PAYMENT ADD 
CONSTRAINT FK_MODIFIED_BY_USER
 FOREIGN KEY (MODIFIED_BY)
 REFERENCES EG_USER (ID_USER) ENABLE
 VALIDATE;




/*************Modified table for nullable filed***********\

ALTER TABLE EGEIS_PENSION_HEADER
  MODIFY (ID_EMP   NOT NULL)
  MODIFY (DISBURSEMENT_TYPE   NOT NULL);

ALTER TABLE EGEIS_NOMINEE_TYPE
  MODIFY (FULL_BENEFIT_ELEGIBLE  NUMBER(1)  NOT NULL)
  MODIFY (GENDER  VARCHAR2(1)  NOT NULL);

ALTER TABLE EGEIS_NOM_CERT_REQD
  MODIFY (ID_NOMINEE_TYPE   NOT NULL)
  MODIFY (ID_CERT_TYPE   NOT NULL);

ALTER TABLE EGEIS_NOM_CERT_REQD ADD 
CONSTRAINT UNIQUE_NOMINEETYPE_CERTTYPE
 UNIQUE (ID_CERT_TYPE, ID_NOMINEE_TYPE)
 ENABLE
 VALIDATE;

ALTER TABLE EGEIS_CERT_DETAILS
   RENAME COLUMN RESENT_DATE TO PRESENT_DATE;

ALTER TABLE EGEIS_CERT_DETAILS
  MODIFY (ID_EMP   NOT NULL)
  MODIFY (ID_CERT_TYPE   NOT NULL)
  MODIFY (CREATED_BY   NOT NULL)
  MODIFY (CREATED_DATE   NOT NULL);

ALTER TABLE EGEIS_NOMINEE_DETAILS
  MODIFY (ID_PENSION_HEADER   NOT NULL)
  MODIFY (ID_NOMINEE_TYPE   NOT NULL);

ALTER TABLE EGPAY_PENSION_DETAILS
  MODIFY (ID_PENSION_HEADER   NOT NULL);

ALTER TABLE EGPAY_PENSION_RECOVERIES
  MODIFY (ID_PENSION_DETAILS   NOT NULL)
  MODIFY (ID_EMP   NOT NULL)
  MODIFY (ID_FUND   NOT NULL)
  MODIFY (ID_FUNCTION   NOT NULL)
  MODIFY (ID_FUNCTIONARY   NOT NULL)
  MODIFY (ID_GLCODE   NOT NULL)
  MODIFY (AMOUNT   NOT NULL)
  MODIFY (REFERENCE   NOT NULL);

ALTER TABLE EGPAY_PENSION_PAYMENT
  MODIFY (ID_EMP   NOT NULL)
  MODIFY (AMOUNT   NOT NULL)
  MODIFY (STATUS   NOT NULL)
  MODIFY (TYPE   NOT NULL)
  MODIFY (MODIFIED_BY   NOT NULL)
  MODIFY (MODIFIED_DATE   NOT NULL);




/*****************SEQUENCE***********\

CREATE SEQUENCE EISPAYROLL_PENSION_DETAILS_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EISPAYROLL_PENSION_PAYMENT_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EISPAYROLL_PENSION_RECOV_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EGEIS_CERT_DETAILS_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EGEIS_ELIG_CERT_TYPE_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EGEIS_NOM_CERT_REQ_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EGEIS_NOMINEE_DETAILS_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EGEIS_NOMINEE_TYPE_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

CREATE SEQUENCE EGEIS_PENSION_HEADER_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 999999999999999999999999999
NOCACHE 
NOCYCLE 
NOORDER 

/*****************Table changes***********\

ALTER TABLE EGEIS_NOMINEE_DETAILS
   RENAME COLUMN ID_BANKACCOUNT TO ACCOUNT_NUMBER;

ALTER TABLE EGEIS_NOMINEE_DETAILS
  MODIFY (ACCOUNT_NUMBER  VARCHAR2(32) );
  
ALTER TABLE EGEIS_NOMINEE_DETAILS DROP
  CONSTRAINT FK_BANKACCOUNT  ;
  

 ALTER TABLE EGEIS_NOMINEE_TYPE
 ADD ELIG_STATUS_IF_MARRIED VARCHAR2(1)
 ADD ELIG_STATUS_IF_EMPLOYED VARCHAR2(1)  ;
 
/*****************column renamed***********\
 
ALTER TABLE EGEIS_PENSION_HEADER
   RENAME COLUMN ID_BANK_BRANCH TO ID_BRANCH ;


/********ADDED PAYSCALE REFERENCE IN PENSIO_DETAILS*********\

ALTER TABLE EGPAY_PENSION_DETAILS
  ADD ID_PAYSCALE NUMBER(12);

ALTER TABLE EGPAY_PENSION_DETAILS ADD 
CONSTRAINT FK_ID_PAYSCALE
 FOREIGN KEY (ID_PAYSCALE)
 REFERENCES EGPAY_PAYSCALE_HEADER (ID) ENABLE
 VALIDATE;


/**********ADDED MONTHLY_PENSION_AMOUNT************\

ALTER TABLE EGPAY_PENSION_DETAILS
  ADD MONTHLY_PENSION_AMOUNT NUMBER(12,2);


/*********ADDED BILL REGISTER REFERENCE FROM PENSION DETAILS TO EG_BILLREGISTER*****\

ALTER TABLE EGPAY_PENSION_DETAILS
  ADD ID_BILLREGISTER NUMBER(12);

ALTER TABLE EGPAY_PENSION_DETAILS ADD 
CONSTRAINT FK_ID_BILLREGISTER
 FOREIGN KEY (ID_BILLREGISTER)
 REFERENCES EG_BILLREGISTER (ID) ENABLE
 VALIDATE

/*********added a row for contigency bill in eg_number table*********\

Insert into eg_numbers
(ID, VOUCHERTYPE, VOUCHERNUMBER, FISCIALPERIODID)
Values
(249, 'CEN', 1, 7);
COMMIT;


************* EIS DB changes 05-sep-2008 *************************
ALTER TABLE EG_EMPLOYEE
   RENAME COLUMN STATUS_ID TO EMPLOYMENT_STATUS

   ALTER TABLE EG_EMPLOYEE
  ADD STATUS NUMBER(12)


ALTER TABLE EG_EMPLOYEE
 ADD CONSTRAINT STATUS_EGW_FK
 FOREIGN KEY (STATUS)
 REFERENCES EGW_STATUS (ID)


 INSERT INTO  EGW_STATUS E (ID,MODULETYPE,DESCRIPTION,LASTMODIFIEDDATE) VALUES ('60', 'Pension','Employed','01/sep/2008');
 
 INSERT INTO  EGW_STATUS E (ID,MODULETYPE,DESCRIPTION,LASTMODIFIEDDATE) VALUES ('61', 'Pension','Retired','01/sep/2008');

 INSERT INTO  EGW_STATUS E (ID,MODULETYPE,DESCRIPTION,LASTMODIFIEDDATE) VALUES ('62', 'Pension','Deceased','01/sep/2008');

 INSERT INTO  EGW_STATUS E (ID,MODULETYPE,DESCRIPTION,LASTMODIFIEDDATE) VALUES ('63', 'Pension','Suspended','01/sep/2008');

 UPDATE EG_EMPLOYEE E SET E.STATUS=(SELECT ID FROM EGW_STATUS WHERE DESCRIPTION LIKE 'Employed') WHERE E.ISACTIVE=1

 UPDATE EG_EMPLOYEE E SET E.STATUS=(SELECT ID FROM EGW_STATUS WHERE DESCRIPTION LIKE 'Suspended') WHERE E.ISACTIVE=0

 

   Insert into egeis_nominee_type
      (ID, NOMINEE_TYPE, FULL_BENEFIT_ELEGIBLE, GENDER, ELEGIBLE_AGE, ELIG_STATUS_IF_MARRIED, ELIG_STATUS_IF_EMPLOYED)
    Values
      (3, 'DAUGHTER', 0, 'F', 25, '0', '0');
   Insert into egeis_nominee_type
      (ID, NOMINEE_TYPE, FULL_BENEFIT_ELEGIBLE, GENDER)
    Values
      (4, 'HUSBAND', 1, 'M');
   COMMIT;

ALTER TABLE EGEIS_NOMINEE_DETAILS
  ADD NAME VARCHAR2(256)
  
  
ALTER TABLE EGEIS_NOMINEE_DETAILS
  ADD GRATUITY_AMOUNT NUMBER(12)
  
  ALTER TABLE EGEIS_NOMINEE_DETAILS
  ADD GROSS_PAY_AMOUNT NUMBER(12)  
  
UPDATE  EGEIS_NOMINEE_TYPE n SET n.ELEGIBLE_AGE=25 WHERE n.NOMINEE_TYPE='SON'  

/***********inserted a row in egw_status for PensionDetails ststus on 08/09/2008**********/

insert into  egw_status values (64,'PensionDetails','Created',sysdate);
insert into  egw_status values (65,'PensionDetails','Approved',sysdate);
insert into  egw_status values (66,'PensionDetails','GratuityDisbursed',sysdate);
insert into  egw_status values (67,'PensionDetails','Suspended',sysdate);
insert into  egw_status values (68,'PensionDetails','PensionTerminated',sysdate);


/***********inserted a row in eg_object_type for gratuity on 09/09/2008 **********/

insert into  EG_OBJECT_TYPE values (10,'Gratuity','Gratuity',sysdate);


***********inserted a row in egw_status for PensionDetails ststus on 11/09/2008 **************/
insert into  EGw_status values (69,'PensionDetails','Submitted',sysdate);
insert into  EGw_status values (70,'PensionDetails','Cancelled',sysdate);

ALTER TABLE EGPAY_PENSION_DETAILS
  ADD CREATED_BY NUMBER(12);

ALTER TABLE EGPAY_PENSION_DETAILS ADD 
CONSTRAINT FK_CREATEDBY
 FOREIGN KEY (CREATED_BY)
 REFERENCES EG_USER (ID_USER) ENABLE
 VALIDATE;           

/*****16/09/2008 - finance integration purpose id glcode mapping for gratuity/pension payable*/

insert into  EGF_ACCOUNTCODE_PURPOSE values (33,'Gratuity Payable');
insert into  EGF_ACCOUNTCODE_PURPOSE values (34,'Pension Payable');


Insert into chartofaccountdetail (ID, GLCODEID, DETAILTYPEID, ISCONTROLCODE) Values (24, 757, 8, 1);
Insert into chartofaccountdetail (ID, GLCODEID, DETAILTYPEID, ISCONTROLCODE) Values (25, 755, 8, 1);
Insert into chartofaccountdetail (ID, GLCODEID, DETAILTYPEID, ISCONTROLCODE) Values (26, 757, 4, 1);
Insert into chartofaccountdetail (ID, GLCODEID, DETAILTYPEID, ISCONTROLCODE) Values (27, 755, 4, 1);


update chartofaccounts c set c.PURPOSEID=33 where c.ID=757
update chartofaccounts c set c.PURPOSEID=34 where c.ID=755 

/********* ADDED ON 23/09/2008 TO change column names and set default values for husband and wife ********************/
alter table EGEIS_NOMINEE_TYPE rename column FULL_BENEFIT_ELEGIBLE TO FULL_BENEFIT_ELIGIBLE;
alter table EGEIS_NOMINEE_TYPE rename column ELEGIBLE_AGE TO ELIGIBLE_AGE;

update EGEIS_NOMINEE_TYPE NT SET ELIGIBLE_AGE=200 WHERE NT.NOMINEE_TYPE='HUSBAND' or  NT.NOMINEE_TYPE='WIFE';
update EGEIS_NOMINEE_TYPE NT SET NT.ELIG_STATUS_IF_MARRIED=2 WHERE NT.NOMINEE_TYPE='HUSBAND' or  NT.NOMINEE_TYPE='WIFE';
update EGEIS_NOMINEE_TYPE NT SET NT.ELIG_STATUS_IF_EMPLOYED=2 WHERE NT.NOMINEE_TYPE='HUSBAND' or  NT.NOMINEE_TYPE='WIFE';

COMMIT;

/********* ADDED ON 25/09/2008 **********************/
Insert into eg_action
   (ID, NAME, UPDATEDTIME, URL, QUERYPARAMS, URLORDERID, MODULE_ID, DISPLAY_NAME, IS_ENABLED)
 Values
   (SEQ_EG_ACTION.nextval, 'ModifyPension', TO_DATE('09/05/2008 17:44:58', 'MM/DD/YYYY HH24:MI:SS'), '/empPension/BeforePensionSearchAction.do', 'submitType=execute\&mode=beforeModifyDetails', 1, (select ID_MODULE from eg_module where module_name like 'Pension'), 'Modify', 1);
   
 /********* ADDED ON 26/09/2008 **********************/
Insert into eg_roleaction_map
   (ROLEID, ACTIONID)
 Values
   (5, (select ID from eg_action where name like 'ModifyPension'));
COMMIT;  

Insert into eg_module
    (ID_MODULE, MODULE_NAME, LASTUPDATEDTIMESTAMP, ISENABLED, MODULE_NAMELOCAL, PARENTID, MODULE_DESC)
  Values
    (SEQ_MODULEMASTER.nextval, 'Recoveries', TO_DATE('09/26/2008 13:04:29', 'MM/DD/YYYY HH24:MI:SS'), 1, 'Recoveries', 
    (select ID_MODULE from eg_module where module_name like 'Pay-Pension'), 'Recoveries');
 COMMIT;
 
 Insert into eg_action
    (ID, NAME, UPDATEDTIME, URL, QUERYPARAMS, URLORDERID, MODULE_ID, ORDER_NUMBER, DISPLAY_NAME, IS_ENABLED)
  Values
    (SEQ_EG_ACTION.nextval, 'RecordRecoveries', TO_DATE('09/26/2008 13:04:29', 'MM/DD/YYYY HH24:MI:SS'), '/recordRecovery/search.jsp', 'mode=create', 1, (select ID_MODULE from eg_module where module_name like 'Recoveries'), 1, 'Record Recoveries', 1);
 Insert into eg_action
    (ID, NAME, UPDATEDTIME, URL, QUERYPARAMS, URLORDERID, MODULE_ID, ORDER_NUMBER, DISPLAY_NAME, IS_ENABLED)
  Values
    (SEQ_EG_ACTION.nextval, 'modifyGratuity', TO_DATE('09/26/2008 14:16:51', 'MM/DD/YYYY HH24:MI:SS'), '/pension/search.jsp', 'mode=modify', 3, (select ID_MODULE from eg_module where module_name like 'ComputeGratuity'), 3, 'Modify', 1);
 COMMIT;
 
 Insert into eg_roleaction_map
    (ROLEID, ACTIONID)
  Values
    (5, (select ID from eg_action where name like 'modifyGratuity'));
 Insert into eg_roleaction_map
    (ROLEID, ACTIONID)
  Values
    (5, (select ID from eg_action where name like 'RecordRecoveries'));

 commit;
 
  
  /* ADDED ON 29/09/2008 - shd go to egf script*/
  alter table eg_billdetails add NARRATION  VARCHAR2(250);  
 commit;