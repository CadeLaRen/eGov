package org.egov.payroll.model;

// Generated Aug 28, 2007 7:45:39 PM by Hibernate Tools 3.2.0.b9

import java.math.BigDecimal;
import java.util.Comparator;

import org.egov.commons.CChartOfAccounts;

/**
 * EgpayDeductions generated by hbm2java
 */
public class Deductions implements java.io.Serializable {

	private Integer id;

	private EmpPayroll empPayroll;

	private Advance salAdvances;

	private SalaryCodes salaryCodes;
	
	private CChartOfAccounts chartofaccounts;
	
	private BigDecimal amount;
	
	private BigDecimal prevYtdAmount;
	
	private String referenceno;
	
	AdvanceSchedule advanceScheduler;

	public Deductions() {
	}

	public Deductions(Integer id, EmpPayroll empPayroll,
			Advance salAdvances, SalaryCodes salaryCodes,
			CChartOfAccounts chartofaccounts,BigDecimal amount) {
		this.id = id;
		this.empPayroll = empPayroll;
		this.salAdvances = salAdvances;
		this.salaryCodes = salaryCodes;
		this.amount = new BigDecimal (Math.round(amount.doubleValue()));
		this.chartofaccounts = chartofaccounts;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public EmpPayroll getEmpPayroll() {
		return this.empPayroll;
	}

	public void setEmpPayroll(EmpPayroll empPayroll) {
		this.empPayroll = empPayroll;
	}

	public Advance getSalAdvances() {
		return this.salAdvances;
	}

	public void setSalAdvances(Advance salAdvances) {
		this.salAdvances = salAdvances;
	}

	public SalaryCodes getSalaryCodes() {
		return this.salaryCodes;
	}

	public void setSalaryCodes(SalaryCodes salaryCodes) {
		this.salaryCodes = salaryCodes;
	}
	
	public CChartOfAccounts getChartofaccounts() {
		return this.chartofaccounts;
	}

	public void setChartofaccounts(CChartOfAccounts chartofaccounts) {
		this.chartofaccounts = chartofaccounts;
	}
	
	public BigDecimal getAmount() {
		return this.amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = new BigDecimal(Math.round(amount.doubleValue()));
	}

	public BigDecimal getPrevYtdAmount() {
		return prevYtdAmount;
	}

	public void setPrevYtdAmount(BigDecimal prevYtdAmount) {
		this.prevYtdAmount = prevYtdAmount;
	}
	
	
	public int compareTo(Object anotherDeduction) throws ClassCastException {
	    if (!(anotherDeduction instanceof Deductions)){
	      throw new ClassCastException("A Deduction object expected.");
	    }
	    int dedId = ((Deductions) anotherDeduction).getId();  
	    return this.id.compareTo(dedId);  
	  }
	
	public static Comparator SalarycodeComparator = new Comparator() {
	    public int compare(Object deduction, Object anotherDeduction) {	    	
	    	Integer	order1 = ((Deductions) deduction).getSalaryCodes().getOrderId().intValue();	
	    	Integer	order2 = ((Deductions) anotherDeduction).getSalaryCodes().getOrderId().intValue();	      
	    	return order1.compareTo(order2);	      
	    }
	 };

	public String getReferenceno() {
		return referenceno;
	}

	public void setReferenceno(String referenceno) {
		this.referenceno = referenceno;
	}

	public AdvanceSchedule getAdvanceScheduler() {
		return advanceScheduler;
	}

	public void setAdvanceScheduler(AdvanceSchedule advanceScheduler) {
		this.advanceScheduler = advanceScheduler;
	}

}
