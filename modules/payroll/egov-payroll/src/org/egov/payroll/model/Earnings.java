package org.egov.payroll.model;

// Generated Aug 28, 2007 7:45:39 PM by Hibernate Tools 3.2.0.b9

import java.math.BigDecimal;
import java.util.Comparator;

/**
 * EgpayEarnings generated by hbm2java
 */
public class Earnings implements java.io.Serializable {

	private Integer id;

	private EmpPayroll empPayroll;

	private SalaryCodes salaryCodes;

	private BigDecimal pct;

	private BigDecimal amount;
	
	private BigDecimal prevYtdAmount;

	public Earnings() {
	}

	public Earnings(Integer id, EmpPayroll empPayroll,
			SalaryCodes salaryCodes, BigDecimal pct, BigDecimal amount) {
		this.id = id;
		this.empPayroll = empPayroll;
		this.salaryCodes = salaryCodes;
		this.pct = pct;
		this.amount = new BigDecimal(Math.round(amount.doubleValue()));
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public EmpPayroll getEmpPayroll() {
		return this.empPayroll;
	}

	public void setEmpPayroll(EmpPayroll empPayroll) {
		this.empPayroll = empPayroll;
	}

	public SalaryCodes getSalaryCodes() {
		return this.salaryCodes;
	}

	public void setSalaryCodes(SalaryCodes salaryCodes) {
		this.salaryCodes = salaryCodes;
	}

	public BigDecimal getPct() {
		return this.pct;
	}

	public void setPct(BigDecimal pct) {
		this.pct = pct;
	}

	public BigDecimal getAmount() {
		return this.amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = new BigDecimal(Math.round(amount.doubleValue()));
	}

	public BigDecimal getPrevYtdAmount() {
		return prevYtdAmount;
	}

	public void setPrevYtdAmount(BigDecimal prevYtdAmount) {
		this.prevYtdAmount = prevYtdAmount;
	}
	
	public static Comparator SalarycodeComparator = new Comparator() {
	    public int compare(Object earning, Object anotherEarning) {	    	
	    	Integer	order1 = ((Earnings) earning).getSalaryCodes().getOrderId().intValue();	
	    	Integer	order2 = ((Earnings) anotherEarning).getSalaryCodes().getOrderId().intValue();	      
	    	return order1.compareTo(order2);	      
	    }
	 };

}
