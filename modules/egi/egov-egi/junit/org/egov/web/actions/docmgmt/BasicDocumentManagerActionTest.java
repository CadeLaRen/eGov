package org.egov.web.actions.docmgmt;

import java.io.File;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper;
import org.egov.infstr.ValidationException;
import org.egov.infstr.client.filter.EGOVThreadLocals;
import org.egov.infstr.docmgmt.AssociatedFile;
import org.egov.infstr.docmgmt.DocumentManagerService;
import org.egov.infstr.docmgmt.DocumentObject;
import org.egov.infstr.docmgmt.documents.Notice;
import org.egov.infstr.services.PersistenceService;
import org.egov.lib.rjbac.user.UserImpl;
import org.mockito.Matchers;
import org.mockito.Mockito;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.XWorkTestCase;
import com.opensymphony.xwork2.util.ValueStack;

public class BasicDocumentManagerActionTest extends XWorkTestCase {
	private BasicDocumentManagerAction action;
	private DocumentManagerService<DocumentObject> docMgrService;
	private PersistenceService<UserImpl, Integer> userService;

	@Override
	protected void setUp() throws Exception {
		super.setUp();
		EGOVThreadLocals.setUserId("1");
		this.docMgrService = Mockito.mock(DocumentManagerService.class);
		this.userService = Mockito.mock(PersistenceService.class);
		this.action = new BasicDocumentManagerAction();
		this.action.setDocumentManagerService(this.docMgrService);
		this.action.setUserPersistenceService(this.userService);
	}

	public void testExecute() throws Exception {
		final ValueStack stack = ActionContext.getContext().getValueStack();
		Mockito.when(this.docMgrService.isAutoGenerateDocNumber()).thenReturn(
				true);
		stack.push(this.action);
		String result = this.action.execute();
		assertEquals("success", result);
		Mockito.when(this.docMgrService.isAutoGenerateDocNumber()).thenReturn(
				false);
		this.action.setDocNumber(null);
		result = this.action.execute();
		assertEquals("success", result);
		this.action.setDocNumber("DOCNO");
		this.action.setModuleName("egi");
		result = this.action.execute();
		assertEquals("success", result);
	}

	public void testViewDocument() {
		String result = this.action.viewDocument();
		assertEquals("success", result);
		this.action.setDocNumber("DUMMYDOCNUM");
		this.action.setModuleName("egi");
		final DocumentObject docObject = createDocumentObject("DUMMYDOCNUM");
		Mockito.when(this.docMgrService.getDocumentObject("DUMMYDOCNUM", "egi"))
				.thenReturn(docObject);
		result = this.action.viewDocument();
		assertEquals("success", result);
		docObject.setJcrUUID("uuid");
		Mockito.when(
				this.docMgrService.getDocumentObjectByUuid(Matchers.anyString()))
				.thenReturn(docObject);
		result = this.action.viewDocument();
		assertEquals("success", result);
		docObject.setJcrUUID(null);
		Mockito.when(this.docMgrService.getDocumentObject("DUMMYDOCNUM", "egi"))
				.thenThrow(new ValidationException("", ""));
		try {
			this.action.viewDocument();
			fail();
		} catch (final ValidationException e) {
			assertNotNull(e);
		}

	}

	public void testAddDocument() throws Exception {
		Mockito.when(this.docMgrService.isAutoGenerateDocNumber()).thenReturn(
				true);
		Mockito.when(this.docMgrService.generateDocumentNumber()).thenReturn(
				"1");
		final DocumentObject model = createDocumentObject("DUMMYDOCNUM");
		final Field documentObject = DocumentManagerAction.class
				.getDeclaredField("documentObject");
		this.action.setModuleName("egi");
		documentObject.setAccessible(true);
		documentObject.set(this.action, model);
		Mockito.when(this.docMgrService.getDocumentObject("DUMMYDOCNUM", "egi"))
				.thenReturn(model);
		Mockito.when(this.docMgrService.addDocumentObject(model)).thenReturn(
				model);
		String result = this.action.addDocument();
		assertEquals("success", result);
		final AssociatedFile associatedFile = new AssociatedFile();
		associatedFile.setFileName("fileName.txt");
		associatedFile.setMimeType("text/plain");
		associatedFile.setRemarks("remarks");
		associatedFile.setFileInputStream(Mockito.mock(FileInputStream.class));
		associatedFile.setModifiedBy(1);
		associatedFile.setCreatedBy(1);
		associatedFile.setCreatedDate(new Date());
		associatedFile.setModifiedDate(new Date());
		model.getAssociatedFiles().add(associatedFile);
		Mockito.when(
				this.docMgrService.getDocumentObject(Matchers.anyString(),
						Matchers.anyString())).thenReturn(model);
		final MultiPartRequestWrapper multiPartRequestWrapper = Mockito
				.mock(MultiPartRequestWrapper.class);
		File[] f = new File[1];
		f[0] = new File("fileName.txt");
		f[0].createNewFile();
		String[] fileName = new String[1];
		fileName[0] = "fileName.txt";
		String[] mimeTye = new String[1];
		mimeTye[0] = "text/plain";
		final List<String> fileCaption = new ArrayList<String>();
		fileCaption.add("");
		this.action.setFileCaption(fileCaption);
		final List<String> fileInfo = new ArrayList<String>();
		fileInfo.add("enter file remarks");
		this.action.setFileInfo(fileInfo);
		Mockito.when(multiPartRequestWrapper.getFileNames(Matchers.anyString()))
				.thenReturn(fileName);
		Mockito.when(
				multiPartRequestWrapper.getContentTypes(Matchers.anyString()))
				.thenReturn(mimeTye);
		Mockito.when(multiPartRequestWrapper.getFiles(Matchers.anyString()))
				.thenReturn(f);
		ServletActionContext.setRequest(multiPartRequestWrapper);

		model.setDocumentNumber("To be assigned");
		try {
			result = this.action.addDocument();
		} catch (final ValidationException e) {
			assertTrue(true);
		}
		associatedFile.setFileName("fff.xml");
		model.getAssociatedFiles().add(associatedFile);
		f = new File[5];
		f[0] = new File("fileName2.txt");
		f[0].createNewFile();
		f[1] = new File("fileName2.txt");
		f[1].createNewFile();
		f[2] = new File("fileName3.exe");
		f[2].createNewFile();
		f[3] = new File("fileName2.txt");
		f[3].createNewFile();
		f[4] = new File("fileNa.txt");
		f[4].createNewFile();

		fileName = new String[5];

		fileName[0] = "fileName2.txt";
		fileName[1] = "fileName2.txt";
		fileName[2] = "fileName3.exe";
		fileName[3] = "fileName2.txt";
		fileName[4] = "fileNa.txt";

		mimeTye = new String[5];
		mimeTye[0] = "text/plain";
		mimeTye[1] = "text/plain";
		mimeTye[2] = "application/abc";
		mimeTye[3] = "text/plain";
		mimeTye[4] = "text/plain";

		fileCaption.add("abc");
		fileCaption.add("efr");
		fileCaption.add("asad");
		fileCaption.add("asadsd");
		this.action.setFileCaption(fileCaption);
		fileInfo.add("sdsd");
		fileInfo.add("aarks");
		fileInfo.add("rks");
		fileInfo.add("rkssds");
		this.action.setFileInfo(fileInfo);
		final UserImpl user = new UserImpl();
		user.setFirstName("firstName");
		user.setLastName("last Name");
		Mockito.when(
				this.userService.findById(Matchers.anyInt(),
						Matchers.anyBoolean())).thenReturn(user);
		Mockito.when(multiPartRequestWrapper.getFiles(Matchers.anyString()))
				.thenReturn(f);
		Mockito.when(
				multiPartRequestWrapper.getContentTypes(Matchers.anyString()))
				.thenReturn(mimeTye);
		Mockito.when(multiPartRequestWrapper.getFileNames(Matchers.anyString()))
				.thenReturn(fileName);

		ServletActionContext.setRequest(multiPartRequestWrapper);
		result = this.action.addDocument();
		assertEquals("success", result);

	}

	public void testEditDocument() throws Exception {
		final String result = this.action.editDocument();
		assertEquals("success", result);
	}

	public void testAttachDocument() throws Exception {
		final DocumentObject model = createDocumentObject("DUMMYDOCNUM");
		this.action.setModuleName("egi");
		final Field documentObject = DocumentManagerAction.class
				.getDeclaredField("documentObject");
		documentObject.setAccessible(true);
		documentObject.set(this.action, model);
		final UserImpl user = new UserImpl();
		user.setFirstName("firstName");
		user.setLastName(null);
		Mockito.when(
				this.userService.findById(Matchers.anyInt(),
						Matchers.anyBoolean())).thenReturn(user);
		Mockito.when(this.docMgrService.getDocumentObject("DUMMYDOCNUM", "egi"))
				.thenReturn(model);
		final MultiPartRequestWrapper multiPartRequestWrapper = Mockito
				.mock(MultiPartRequestWrapper.class);
		final File[] f = new File[1];
		f[0] = new File("fileName.txt");
		f[0].createNewFile();
		final String[] fileName = new String[1];
		fileName[0] = "fileName.txt";
		final String[] mimeTye = new String[1];
		mimeTye[0] = "text/plain";
		final List<String> fileCaption = new ArrayList<String>();
		fileCaption.add("");
		this.action.setFileCaption(fileCaption);
		final List<String> fileInfo = new ArrayList<String>();
		fileInfo.add("enter file remarks");
		this.action.setFileInfo(fileInfo);
		Mockito.when(multiPartRequestWrapper.getFileNames(Matchers.anyString()))
				.thenReturn(fileName);
		Mockito.when(
				multiPartRequestWrapper.getContentTypes(Matchers.anyString()))
				.thenReturn(mimeTye);
		Mockito.when(multiPartRequestWrapper.getFiles(Matchers.anyString()))
				.thenReturn(f);
		ServletActionContext.setRequest(multiPartRequestWrapper);
		final String result = this.action.updateDocument();
		assertEquals("success", result);

	}

	public void testAddRemoveFile() throws Exception {
		final DocumentObject model = createDocumentObject("DUMMYDOCNUM");
		final Field documentObject = DocumentManagerAction.class
				.getDeclaredField("documentObject");
		documentObject.setAccessible(true);
		documentObject.set(this.action, model);
		final List<String> fileNames = new ArrayList<String>();
		fileNames.add("text.txt");
		this.action.setFileNames(fileNames);
		Mockito.when(this.docMgrService.getDocumentObject("DUMMYDOCNUM", "egi"))
				.thenReturn(model);
		try {
			this.action.updateDocument();
		} catch (final Exception e) {
		}

	}

	public void testSearch() throws Exception {
		this.action.setType("Notice");
		this.action.getType();
		this.action.setModuleName("egi");
		final String result = this.action.search();
		assertEquals("searchNotice", result);
		this.action.setType("");
		final HttpServletResponse response = Mockito
				.mock(HttpServletResponse.class);
		Mockito.when(response.getWriter()).thenReturn(
				new PrintWriter(System.out));
		final HttpServletRequest request = Mockito
				.mock(HttpServletRequest.class);
		ServletActionContext.setResponse(response);
		ServletActionContext.setRequest(request);
		this.action.searchDocument();
		this.action.setType(null);
		this.action.searchDocument();
		this.action.setType("DocumentObject");
		this.action.searchDocument();
		this.action.setType("Notice");
		this.action.searchDocument();
		final String[] docNum = { "1" };
		final String[] noticeDate = { "01/01/2010", "01/01/2010" };
		Mockito.when(request.getParameterValues("documentNumber")).thenReturn(
				docNum);
		Mockito.when(request.getParameterValues("noticeDate")).thenReturn(
				noticeDate);
		final List<DocumentObject> docList = new ArrayList<DocumentObject>();
		Notice notice = new Notice();
		notice.setDocumentNumber("MYDOC");
		notice.setTags("mytag");
		notice.setDomainName("domainName");
		notice.setModuleName("egi");
		final Set<AssociatedFile> associatedFiles = new HashSet<AssociatedFile>();
		final AssociatedFile associatedFile = new AssociatedFile();
		associatedFile.setFileName("text.txt");
		final UserImpl user = new UserImpl();
		user.setId(1);
		user.setFirstName("me");
		user.setLastName("you");
		Mockito.when(this.userService.findById(1, false)).thenReturn(user);
		associatedFile.setCreatedBy(1);
		associatedFile.setModifiedBy(1);
		associatedFile.setRemarks("remarks");
		associatedFile.setCreatedDate(new Date());
		associatedFile.setModifiedDate(new Date());
		associatedFiles.add(associatedFile);
		notice.setAssociatedFiles(associatedFiles);

		notice.setAddress("Address");
		notice.setAddressedTo("addressTo");
		notice.setAssociatedObjectId("accoss");
		notice.setComments("comments");
		notice.setNoticeDate(new Date());
		notice.setNoticeType("noticetype");
		docList.add(notice);
		final HashMap<String, String> hashMap = new HashMap<String, String>();
		hashMap.put("documentNumber", "1");
		hashMap.put("noticeDate", "01/01/2010#01/01/2010");
		hashMap.put("moduleName", "egi");
		Mockito.when(
				this.docMgrService.searchDocumentObject(Notice.class, hashMap))
				.thenReturn(docList);
		this.action.searchDocument();
		notice = (Notice) docList.get(0);
		notice.setAddress(null);
		notice.setAddressedTo(null);
		notice.setAssociatedObjectId(null);
		this.action.searchDocument();
		docList.clear();
		Mockito.when(
				this.docMgrService.searchDocumentObject(Notice.class, hashMap))
				.thenReturn(docList);
		this.action.searchDocument();
	}

	public void testViewDocumentObjectFiles() throws Exception {
		final DocumentObject documentObject = createDocumentObject("DocNum");
		Mockito.when(this.docMgrService.getDocumentObject(Matchers.anyString()))
				.thenReturn(documentObject);
		final HttpServletResponse response = Mockito
				.mock(HttpServletResponse.class);
		Mockito.when(response.getWriter()).thenReturn(
				new PrintWriter(System.out));
		ServletActionContext.setResponse(response);
		this.action.viewDocumentObjectFiles();
	}

	public void testClosure() {
		this.action.setDocNumber("docNumber");
		this.action.getModuleName();
		this.action.getFileInfo();
		this.action.setFileInfo(new ArrayList<String>());
		this.action.setFileCaption(new ArrayList<String>());
		this.action.getActionCommand();
		this.action.setActionCommand("actionCommand");
		this.action.getFileNames();
		this.action.getModel();
		this.action.prepare();
		assertTrue(true);
	}

	private DocumentObject createDocumentObject(final String docNumber) {
		final DocumentObject docObject = new DocumentObject();
		docObject.setDocumentNumber(docNumber);
		docObject.setTags("mytag");
		docObject.setDomainName("domainName");
		docObject.setModuleName("egi");
		final Set<AssociatedFile> associatedFiles = new HashSet<AssociatedFile>();
		final AssociatedFile associatedFile = new AssociatedFile();
		associatedFile.setFileName("text.txt");
		final UserImpl user = new UserImpl();
		user.setId(1);
		user.setFirstName("me");
		user.setLastName("you");
		Mockito.when(this.userService.findById(1, false)).thenReturn(user);
		associatedFile.setCreatedBy(1);
		associatedFile.setModifiedBy(1);
		associatedFile.setRemarks("remarks");
		associatedFile.setCreatedDate(new Date());
		associatedFile.setModifiedDate(new Date());
		associatedFiles.add(associatedFile);
		docObject.setAssociatedFiles(associatedFiles);
		return docObject;
	}

}
