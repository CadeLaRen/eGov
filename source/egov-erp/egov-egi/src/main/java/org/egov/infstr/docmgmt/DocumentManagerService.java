/*
 * @(#)DocumentManagerService.java 3.0, 17 Jun, 2013 11:54:08 AM
 * Copyright 2013 eGovernments Foundation. All rights reserved. 
 * eGovernments PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package org.egov.infstr.docmgmt;

import java.util.List;
import java.util.Map;

import javax.jcr.RepositoryException;

import org.egov.infstr.ValidationException;

public interface DocumentManagerService<T extends DocumentObject> {
	
	/** Node name for Associated file folder */
	String NODE_ASSOCIATEDFILES = "files";
	
	/** Node name for DocumentObject */
	String NODE_DOC_OBJECT = "documentObject";
	
	/** Property name for Document Number */
	String PROP_DOC_NUM = "documentNumber";
	
	/** Property name for Document Search Tag */
	String PROP_META_TAGS = "searchMetaTags";
	
	/** Property name for Domain Name */
	String PROP_DOMAIN_NAME = "domainName";
	
	/** Property name for Module Name */
	String PROP_MODULE_NAME = "moduleName";
	
	String PATH_SEPARATOR = "/";
	
	/** Node path separator */
	/**
	 * Check Document Number Generation is Automatic
	 * @return boolean
	 */
	boolean isAutoGenerateDocNumber();
	
	/**
	 * Generate and provide a Document Number automatically by executing dynamic script
	 * @return String docNumber
	 */
	String generateDocumentNumber();
	
	/**
	 * Creates a Document Object Node. The documentNumber is unique in the repository. The node is
	 * marked as versionable.
	 * @param docObject
	 * @return DocumentObject
	 */
	T addDocumentObject(T docObject) throws ValidationException, IllegalAccessException, RepositoryException, RuntimeException;
	
	/**
	 * For updating the Document Object Node value
	 * @param docObject
	 * @return saved DocumentObject
	 */
	T updateDocumentObject(T docObject) throws ValidationException, IllegalAccessException, RepositoryException, RuntimeException;
	
	/**
	 * To get the entire DocumentObject for the given UUid
	 * @param uuid
	 * @return DocumentObject
	 */
	T getDocumentObjectByUuid(String uuid);
	
	/**
	 * To get the DocumentObject for the given docNumber
	 * @param docNumber
	 * @return DocumentObject
	 */
	T getDocumentObject(String docNumber);
	
	/**
	 * To get the entire DocumentObject for the given docNumber and moduleName
	 * @param docNumber
	 * @param moduleName
	 * @return DocumentObject
	 */
	T getDocumentObject(String docNumber, String moduleName);
	
	/**
	 * To all DocumentObject for the given search criteria
	 * @param searchArgs must be even (ie property name and its value)
	 * @return DocumentObject
	 */
	List<T> searchDocumentObject(Class<?> searchClass, Map<String, String> searchArgs);
	
	/**
	 * To get the file form the DocumentObject for the given documentNumber and fileName
	 * @param docNumber - the documentNumber in the repository
	 * @param moduleName
	 * @param fileName - name of file associated with this document object
	 * @return AssociatedFile
	 */
	AssociatedFile getFileFromDocumentObject(String docNumber, String moduleName, String fileName);
	
	/**
	 * To get the version history for a Document object *
	 * @param docPath
	 * @return List <T> DocumentObject
	 */
	List<T> getVersionHistory(String docPath);
	
	/**
	 * To get export Document for the specified docPath to an XML file for the given filePath
	 * @param filePath
	 * @param docPath
	 * @param skipBinary
	 * @param noRecurse
	 */
	void exportDocument(String filePath, String docPath, boolean skipBinary, boolean noRecurse);
	
	/**
	 * To get import Document from XML filePath given to the specified docPath
	 * @param filePath
	 * @param docPath
	 */
	void importDocument(String filePath, String docPath);
}
