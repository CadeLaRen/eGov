<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   http://www.springframework.org/schema/security
	   http://www.springframework.org/schema/security/spring-security-3.2.xsd" default-lazy-init="true">

	<security:global-method-security secured-annotations="disabled" access-decision-manager-ref="accessDecisionManager" />
	
	<bean class="org.egov.infstr.security.spring.event.listeners.ApplicationSecurityEventListenerAdaptor">
		<property name="applicationSecurityEventActions">
			<!-- Here the Map entry key must be of type EventType and values are list of bean which implements ApplicationSecurityAction -->
			<map key-type="org.egov.infstr.security.spring.event.EventType">
				<entry key="InteractiveAuthenticationSuccessEvent">
					<list>
						<bean class="org.egov.infstr.security.spring.event.actions.AuthenticationSuccessEventAction"/>
					</list>
				</entry>
			</map>
		</property>
	</bean>	
	
	<bean id="concurrentSessionFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<constructor-arg index="0" ref="sessionRegistry" />
		<constructor-arg index="1" value="/login/securityLogin.jsp?sessionExpired=1" />
	</bean>
	
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	
	<bean id="concurrentSessionControlStrategy" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<constructor-arg index="0" ref="sessionRegistry" />
		<property name="exceptionIfMaximumExceeded" value="false" />
		<property name="maximumSessions" value="-1" />
	</bean>
	
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />
	
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="/index.jsp" />
		<constructor-arg>
			<list>
				<ref bean="simpleSSOFilter" />
				<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/logout.do" />
	</bean>
	
	<bean id="sessionCache" class="org.egov.infstr.security.utils.SessionCache" />
	 
	<bean id="simpleSSOFilter" class="org.egov.infstr.security.spring.filter.SimpleSSOFilter">
		<property name="userService" ref="userService" />
		<property name="authenticationProvider" ref="daoAuthenticationProvider" />
		<property name="logoutUrl" value="/logout.do" />
		<property name="sessionTimeout" value="30" />
		<property name="sessionCache" ref="sessionCache" />
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="authenticationProcessingFilter" class="org.egov.infstr.security.spring.filter.EgovAuthenticationProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="filterProcessesUrl" value="/j_security_check" />
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="sessionAuthenticationStrategy" ref="concurrentSessionControlStrategy" />
		<property name="credentialFields">
			<list>
				<value>j_password</value>
				<value>locationId</value>
				<value>loginType</value>
				<value>counterId</value>
				<value>ipAddress</value>
			</list>
		</property>
		<property name="userService" ref="userService" />
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
	</bean>
	
	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/login/securityLogin.jsp?error=true" />
		<property name="useForward" value="false" />
	</bean>
	
	<bean id="authenticationSuccessHandler" class="org.egov.infstr.security.spring.AuthenticationSuccessHandler">
		<property name="alwaysUseDefaultTargetUrl" value="false" />
		<property name="defaultTargetUrl" value="/home" />
		<property name="userService" ref="userService"/>
	</bean>
	
	<bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />
	
	<bean id="rememberMeAuthenticationFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>
	
	<bean id="anonymousAuthenticationFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<property name="key" value="anonymous" />
		<property name="userAttribute" value="anonymous,ROLE_ANONYMOUS" />
	</bean>
	
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<constructor-arg index="0" ref="authenticationEntryPoint"/>
		<property name="accessDeniedHandler">
			<bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/error/accessDenied.jsp" />
			</bean>
		</property>
	</bean>
	
	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg index="0" value="/index.jsp"/>
		<property name="forceHttps" value="false" />
	</bean>
	
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="securityMetadataSource" ref="egovFilterInvocationDefinitionSource" />
		<property name="rejectPublicInvocations" value="true" />
	</bean>
	
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.access.vote.RoleVoter">
					<property name="rolePrefix" value="" />
				</bean>
			</list>
		</property>
	</bean>
	
	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<constructor-arg index="0" value="23_*!cdU='612./e;NrI" />
		<constructor-arg index="1" ref="userDetailsService" />
		<property name="parameter" value="rememberMe" />
	</bean>
	
	<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<constructor-arg>
			<list>
				<ref bean="daoAuthenticationProvider" />
				<ref bean="anonymousAuthenticationProvider" />
				<ref bean="rememberMeAuthenticationProvider" />
			</list>
		</constructor-arg>
		<property name="eraseCredentialsAfterAuthentication" value="false" />
	</bean>
	
	<bean id="daoAuthenticationProvider" class="org.egov.infstr.security.spring.dao.EgovDaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="userValidateDao" ref="userValidateDao"/>
	</bean>
	
	<bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
		<property name="key" value="anonymous" />
	</bean>
	
	<bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<constructor-arg index="0" value="23_*!cdU='612./e;NrI" />
	</bean>
	
	<bean id="userDetailsService" class="org.egov.infra.config.security.authentication.UserDetailService">
		<constructor-arg ref="userService"/>
	</bean>
	
	<bean id="egovFilterInvocationDefinitionSource" class="org.egov.infstr.security.spring.EGovFilterInvocationDefinitionSource">
		<property name="actionDao" ref="actionDao" />
	</bean>
	
	<!-- SSL Switching: to use this, configure it in the securityFilterChain bean -->
	<bean id="channelProcessingFilter" class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
		<property name="channelDecisionManager" ref="channelDecisionManager" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source request-matcher="ant"  lowercase-comparisons="true">
				<security:intercept-url pattern="/admin/**" />
				<security:intercept-url pattern="/login/**"/>
				<security:intercept-url pattern="/j_security_check*"/>
				<security:intercept-url pattern="/editProfile.html*"/>
				<security:intercept-url pattern="/signup.html*"/>
				<security:intercept-url pattern="/saveUser.html*"/>
			</security:filter-security-metadata-source>
		</property>
	</bean>
	
	<bean id="channelDecisionManager" class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<ref bean="secureChannelProcessor" />
				<ref bean="insecureChannelProcessor" />
			</list>
		</property>
	</bean>
	
	<bean id="secureChannelProcessor" class="org.springframework.security.web.access.channel.SecureChannelProcessor">
		<property name="entryPoint" ref="retryWithHttps" />
	</bean>
	
	<bean id="insecureChannelProcessor" class="org.springframework.security.web.access.channel.InsecureChannelProcessor">
		<property name="entryPoint" ref="retryWithHttp" />
	</bean>
	
	<bean id="retryWithHttp" class="org.springframework.security.web.access.channel.RetryWithHttpEntryPoint">
		<property name="portResolver" ref="portResolverImpl" />
		<property name="portMapper" ref="portMapperImpl" />
	</bean>
	
	<bean id="retryWithHttps" class="org.springframework.security.web.access.channel.RetryWithHttpsEntryPoint">
		<property name="portResolver" ref="portResolverImpl" />
		<property name="portMapper" ref="portMapperImpl"/>
	</bean>
	
	<bean id="portResolverImpl" class="org.springframework.security.web.PortResolverImpl">
		<property name="portMapper" ref="portMapperImpl" />
	</bean>
	
	<!--Add an entry where key is HTTP port where your server is running and the value is HTTPS port number (HTTP Port Number + 363 = HTTPS Port Number) -->
	<bean id="portMapperImpl" class="org.springframework.security.web.PortMapperImpl">
		<property name="portMappings">
			<map>
				<entry key="8080" value="8443" />
				<entry key="80" value="443" />
			</map>
		</property>
	</bean>
	
	<!-- ACL -->
	<bean id="businessAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<ref bean="aclObjectReadVoter" />
			</list>
		</property>
	</bean>
	
	<bean id="afterInvocationManager" class="org.springframework.security.access.intercept.AfterInvocationProviderManager">
		<property name="providers">
			<list>
				<ref local="afterAclRead" />
			</list>
		</property>
	</bean>
	
	<bean id="afterAclRead" class="org.egov.infstr.security.spring.acl.GenericAclProvider" scope="prototype">
		<constructor-arg ref="persistenceService" />
		<constructor-arg>
			<list>
				<ref bean="readPermission" />
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="administrationPermission" name="administrationPermission" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField" value="org.springframework.security.acls.domain.BasePermission.ADMINISTRATION" />
	</bean>
	
	<bean id="readPermission" name="readPermission" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField" value="org.springframework.security.acls.domain.BasePermission.READ" />
	</bean>
	
	<bean id="writePermission" name="writePermission" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField" value="org.springframework.security.acls.domain.BasePermission.WRITE" />
	</bean>
	
	<bean id="deletePermission" name="deletePermission" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField" value="org.springframework.security.acls.domain.BasePermission.DELETE" />
	</bean>       
</beans>